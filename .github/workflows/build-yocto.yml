name: Build Yocto

on:
  workflow_call:
    outputs:
      artifacts_url:
        description: "URL to retrieve build artifacts"
        value: ${{ jobs.create-output.outputs.url }}

env:
  CACHE_DIR: /efs/qli/meta-qcom
  KAS_REPO_REF_DIR: /efs/qli/meta-qcom/kas-mirrors

jobs:
  kas-setup:
    if: github.repository == 'qualcomm-linux/meta-qcom'
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    steps:
      - name: Setting up kas-container
        run: |
          KAS_CONTAINER=$RUNNER_TEMP/kas-container
          echo "KAS_CONTAINER=$KAS_CONTAINER" >> $GITHUB_ENV
          LATEST=$(git ls-remote --tags --refs --sort="v:refname" https://github.com/siemens/kas | tail -n1 | sed 's/.*\///')
          wget -qO ${KAS_CONTAINER} https://raw.githubusercontent.com/siemens/kas/refs/tags/$LATEST/kas-container
          chmod +x ${KAS_CONTAINER}

      - name: Update kas mirrors
        run: |
          for r in $(find ${KAS_REPO_REF_DIR}/* -maxdepth 0 -type d); do
            echo "pre-fetch: $r"
            git -C $r fetch --prune origin '+refs/*:refs/*'
          done

      - uses: actions/checkout@v4

      - name: Run kas lock
        run: |
          ${KAS_CONTAINER} lock --update ci/base.yml:ci/qcom-distro.yml

      - name: Upload kas lockfile
        uses: actions/upload-artifact@v4
        with:
          name: kas-lockfile
          path: ci/*.lock.yml

      - name: Upload kas-container
        uses: actions/upload-artifact@v4
        with:
          name: kas-container
          path: ${{ env.KAS_CONTAINER }}

  yocto-run-checks:
    needs: kas-setup
    if: github.repository == 'qualcomm-linux/meta-qcom'
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    steps:
      - uses: actions/checkout@v4

      - name: Download kas lockfile
        uses: actions/download-artifact@v4
        with:
          name: kas-lockfile
          path: ci

      - name: Download kas-container
        uses: actions/download-artifact@v4
        with:
          name: kas-container
          path: ${{ runner.temp }}

      - name: Setting up kas-container
        run: |
          KAS_CONTAINER=$RUNNER_TEMP/kas-container
          echo "KAS_CONTAINER=$KAS_CONTAINER" >> $GITHUB_ENV
          chmod +x $KAS_CONTAINER

      - name: Run yocto-check-layer
        run: |
          ci/kas-container-shell-helper.sh ci/yocto-check-layer.sh

      - name: Run Yocto patchreview
        run: |
          ci/kas-container-shell-helper.sh ci/yocto-patchreview.sh

  compile_warm_up:
    needs: [kas-setup, yocto-run-checks]
    if: github.repository == 'qualcomm-linux/meta-qcom'
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    strategy:
      fail-fast: true
      matrix:
        machine:
          - qcs6490-rb3gen2-core-kit
          - qcom-armv8a
        distro:
          - name: poky-altcfg
            yamlfile: ""
          - name: qcom-distro
            yamlfile: ':ci/qcom-distro.yml'
          - name: qcom-distro-prop-image
            yamlfile: ':ci/qcom-distro-prop-image.yml'
        kernel:
          - type: default
            dirname: ""
            yamlfile: ""
    name: ${{ matrix.machine }}/${{ matrix.distro.name }}${{ matrix.kernel.dirname }}
    steps:
      - uses: actions/checkout@v4

      - name: Run kas build
        uses: ./.github/actions/compile
        with:
          machine: ${{matrix.machine}}
          distro_yaml: ${{matrix.distro.yamlfile}}
          distro_name: ${{matrix.distro.name}}
          kernel_yaml: ${{matrix.kernel.yamlfile}}
          kernel_dirname: ${{matrix.kernel.dirname}}
          cache_dir: ${CACHE_DIR}

  compile:
    needs: compile_warm_up
    if: github.repository == 'qualcomm-linux/meta-qcom'
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    outputs:
      url: ${{ steps.compile_kas.outputs.url }}
    strategy:
      fail-fast: true
      matrix:
        machine:
          - iq-8275-evk
          - qcm6490-idp
          - qcs615-adp-air
          - qcs8300-ride-sx
          - qcs9075-iq-9075-evk
          - qcs9100-ride-sx
          - qrb2210-rb1-core-kit
          - qcom-armv7a
        distro:
          - name: poky-altcfg
            yamlfile: ""
          - name: qcom-distro
            yamlfile: ':ci/qcom-distro.yml'
          - name: qcom-distro-prop-image
            yamlfile: ':ci/qcom-distro-prop-image.yml'
        kernel:
          - type: default
            dirname: ""
            yamlfile: ""
        include:
          # Additional builds for specific machines
          - machine: qcom-armv8a
            distro:
                name: qcom-distro
                yamlfile: ':ci/qcom-distro.yml'
            kernel:
                type: additional
                dirname: "+linux-yocto-dev"
                yamlfile: ":ci/linux-yocto-dev.yml"
          - machine: qcom-armv8a
            distro:
                name: qcom-distro
                yamlfile: ':ci/qcom-distro.yml'
            kernel:
                type: additional
                dirname: "+linux-yocto-lts"
                yamlfile: ":ci/linux-yocto-lts.yml"
        exclude:
          # Incompatible builds
          - machine: qcom-armv7a
            distro:
                name: qcom-distro-prop-image
    name: ${{ matrix.machine }}/${{ matrix.distro.name }}${{ matrix.kernel.dirname }}
    steps:
      - uses: actions/checkout@v4

      - name: Run kas build
        uses: ./.github/actions/compile
        id: compile_kas
        with:
          machine: ${{matrix.machine}}
          distro_yaml: ${{matrix.distro.yamlfile}}
          distro_name: ${{matrix.distro.name}}
          kernel_yaml: ${{matrix.kernel.yamlfile}}
          kernel_dirname: ${{matrix.kernel.dirname}}
          cache_dir: ${CACHE_DIR}

  create-output:
    needs: compile
    outputs:
      url: ${{ steps.print-output.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: "Print output"
        id: print-output
        env:
          build_url: ${{ needs.compile.outputs.url }}
        run: |
          echo "Downloads URL: ${build_url}"
          echo "url=\"${build_url}\"" >> $GITHUB_OUTPUT
          echo "${build_url}" > build_url
          echo "## Download URL" >> $GITHUB_STEP_SUMMARY
          echo "[${build_url}](${build_url})" >> $GITHUB_STEP_SUMMARY
      - name: Upload build URL
        uses: actions/upload-artifact@v4
        with:
          name: build_url
          path: build_url
