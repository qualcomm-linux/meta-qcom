From 4233f127c5f1ab7e46b86df025f7d60e17f3b8a4 Mon Sep 17 00:00:00 2001
From: Konrad Dybcio <konrad.dybcio@linaro.org>
Date: Fri, 16 Feb 2024 20:50:59 +0100
Subject: [PATCH] freedreno: Add initial A702 support

Can we forget this SKU exists?

Turns out, not really.. But at least we can get GPU accel on watches!

Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
Signed-off-by: Ricardo Salveti <ricardo.salveti@oss.qualcomm.com>
Upstream-Status: Submitted [https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/27665]
---
 src/freedreno/common/freedreno_dev_info.h     |  3 ++
 src/freedreno/common/freedreno_devices.py     | 52 +++++++++++++++++++
 src/freedreno/registers/adreno/a6xx.xml       |  2 +-
 src/freedreno/vulkan/tu_cmd_buffer.cc         |  5 +-
 src/freedreno/vulkan/tu_device.cc             | 12 ++---
 src/freedreno/vulkan/tu_image.cc              |  2 +-
 src/freedreno/vulkan/tu_pipeline.cc           |  8 +--
 .../drivers/freedreno/a6xx/fd6_emit.cc        |  2 +-
 .../drivers/freedreno/a6xx/fd6_gmem.cc        |  3 +-
 .../drivers/freedreno/freedreno_resource.c    |  2 +-
 10 files changed, 75 insertions(+), 16 deletions(-)

diff --git a/src/freedreno/common/freedreno_dev_info.h b/src/freedreno/common/freedreno_dev_info.h
index 6b20f84506c..4b56f89d297 100644
--- a/src/freedreno/common/freedreno_dev_info.h
+++ b/src/freedreno/common/freedreno_dev_info.h
@@ -219,6 +219,9 @@ struct fd_dev_info {
       /* Whether the sad instruction (iadd3) is supported. */
       bool has_sad;
 
+      /* A702 cuts A LOT of things.. */
+      bool is_a702;
+
       struct {
          uint32_t PC_POWER_CNTL;
          uint32_t TPL1_DBG_ECO_CNTL;
diff --git a/src/freedreno/common/freedreno_devices.py b/src/freedreno/common/freedreno_devices.py
index 6b41d22574d..6897e63c706 100644
--- a/src/freedreno/common/freedreno_devices.py
+++ b/src/freedreno/common/freedreno_devices.py
@@ -825,6 +825,58 @@ add_gpus([
         ],
     ))
 
+add_gpus([
+        GPUId(702), # KGSL
+        GPUId(chip_id=0x00b207002000, name="FD702"), # QRB2210 RB1
+        GPUId(chip_id=0xffff07002000, name="FD702"), # Default no-speedbin fallback
+    ], A6xxGPUInfo(
+        CHIP.A6XX, # NOT a mistake!
+        [a6xx_base, A6XXProps(
+            reg_size_vec4 = 48,
+            instr_cache_size = 64,
+            indirect_draw_wfm_quirk = True,
+            has_cp_reg_write = False,
+            depth_bounds_require_depth_test_quirk = True,
+            has_gmem_fast_clear = True,
+            has_hw_multiview = False,
+            has_sampler_minmax = False,
+            has_lpac = False,
+            has_fs_tex_prefetch = False,
+            sysmem_per_ccu_depth_cache_size = 128 * 1024, # ??????
+            sysmem_per_ccu_color_cache_size = 128 * 1024, # ??????
+            gmem_ccu_color_cache_fraction = CCUColorCacheFraction.FULL.value,
+            vs_max_inputs_count = 16,
+            prim_alloc_threshold = 0x1,
+            storage_16bit = True,
+            is_a702 = True,
+            )
+        ],
+        num_ccu = 1,
+        tile_align_w = 32,
+        tile_align_h = 16,
+        num_vsc_pipes = 16,
+        cs_shared_mem_size = 16 * 1024,
+        wave_granularity = 1,
+        fibers_per_sp = 128 * 16,
+        threadsize_base = 16,
+        max_waves = 32,
+        magic_regs = dict(
+            PC_POWER_CNTL = 0,
+            TPL1_DBG_ECO_CNTL = 0x8000,
+            GRAS_DBG_ECO_CNTL = 0,
+            SP_CHICKEN_BITS = 0x1400,
+            UCHE_CLIENT_PF = 0x84,
+            PC_MODE_CNTL = 0xf,
+            SP_DBG_ECO_CNTL = 0x0,
+            RB_DBG_ECO_CNTL = 0x100000,
+            RB_DBG_ECO_CNTL_blit = 0x100000,
+            HLSQ_DBG_ECO_CNTL = 0,
+            RB_UNKNOWN_8E01 = 0x1,
+            VPC_DBG_ECO_CNTL = 0x0,
+            UCHE_UNKNOWN_0E12 = 0x1,
+        ),
+    ))
+
 # Based on a6xx_base + a6xx_gen4
 a7xx_base = A6XXProps(
         has_gmem_fast_clear = True,
diff --git a/src/freedreno/registers/adreno/a6xx.xml b/src/freedreno/registers/adreno/a6xx.xml
index 17d26f49260..9aa117357fe 100644
--- a/src/freedreno/registers/adreno/a6xx.xml
+++ b/src/freedreno/registers/adreno/a6xx.xml
@@ -4352,7 +4352,7 @@ to upconvert to 32b float internally?
 	<reg32 offset="0x9306" name="VPC_SO_DISABLE" usage="rp_blit">
 		<bitfield name="DISABLE" pos="0" type="boolean"/>
 	</reg32>
-	<reg32 offset="0x9307" name="VPC_POLYGON_MODE2" variants="A7XX-" usage="rp_blit">
+	<reg32 offset="0x9307" name="VPC_POLYGON_MODE2" variants="A6XX-" usage="rp_blit"> <!-- A702 + A7xx -->
 		<bitfield name="MODE" low="0" high="1" type="a6xx_polygon_mode"/>
 	</reg32>
 	<reg32 offset="0x9308" name="VPC_ATTR_BUF_SIZE_GMEM" variants="A7XX-" usage="rp_blit">
diff --git a/src/freedreno/vulkan/tu_cmd_buffer.cc b/src/freedreno/vulkan/tu_cmd_buffer.cc
index e0eb0849e80..1a92534babe 100644
--- a/src/freedreno/vulkan/tu_cmd_buffer.cc
+++ b/src/freedreno/vulkan/tu_cmd_buffer.cc
@@ -1212,7 +1212,8 @@ tu6_emit_tile_select(struct tu_cmd_buffer *cmd,
       tu_cs_emit(cs, vsc->pipe_sizes[tile->pipe] |
                      CP_SET_BIN_DATA5_0_VSC_N(slot) |
                      CP_SET_BIN_DATA5_0_VSC_MASK(tile->slot_mask >> slot) |
-                     COND(abs_mask, CP_SET_BIN_DATA5_0_ABS_MASK(ABS_MASK)));
+                     COND(abs_mask, CP_SET_BIN_DATA5_0_ABS_MASK(ABS_MASK))
+		     /* A702 also sets BIT(0) but that hangchecks */);
       if (abs_mask)
          tu_cs_emit(cs, tile->slot_mask);
       tu_cs_emit(cs, tile->pipe * cmd->vsc_draw_strm_pitch);
@@ -1455,7 +1456,7 @@ tu6_init_static_regs(struct tu_device *dev, struct tu_cs *cs)
    tu_cs_emit_write_reg(cs, REG_A6XX_SP_DBG_ECO_CNTL,
                         phys_dev->info->a6xx.magic.SP_DBG_ECO_CNTL);
    tu_cs_emit_write_reg(cs, REG_A6XX_SP_PERFCTR_ENABLE, 0x3f);
-   if (CHIP == A6XX)
+   if (CHIP == A6XX && !cs->device->physical_device->info->a6xx.is_a702)
       tu_cs_emit_write_reg(cs, REG_A6XX_TPL1_UNKNOWN_B605, 0x44);
    tu_cs_emit_write_reg(cs, REG_A6XX_TPL1_DBG_ECO_CNTL,
                         phys_dev->info->a6xx.magic.TPL1_DBG_ECO_CNTL);
diff --git a/src/freedreno/vulkan/tu_device.cc b/src/freedreno/vulkan/tu_device.cc
index dd79caf6927..2a808284378 100644
--- a/src/freedreno/vulkan/tu_device.cc
+++ b/src/freedreno/vulkan/tu_device.cc
@@ -324,7 +324,7 @@ get_device_extensions(const struct tu_physical_device *device,
 #endif
       .EXT_texel_buffer_alignment = true,
       .EXT_tooling_info = true,
-      .EXT_transform_feedback = true,
+      .EXT_transform_feedback = !device->info->a6xx.is_a702,
       .EXT_vertex_attribute_divisor = true,
       .EXT_vertex_input_dynamic_state = true,
 
@@ -359,15 +359,15 @@ tu_get_features(struct tu_physical_device *pdevice,
    features->fullDrawIndexUint32 = true;
    features->imageCubeArray = true;
    features->independentBlend = true;
-   features->geometryShader = true;
-   features->tessellationShader = true;
+   features->geometryShader = !pdevice->info->a6xx.is_a702;
+   features->tessellationShader = !pdevice->info->a6xx.is_a702;
    features->sampleRateShading = true;
    features->dualSrcBlend = true;
    features->logicOp = true;
    features->multiDrawIndirect = true;
    features->drawIndirectFirstInstance = true;
    features->depthClamp = true;
-   features->depthBiasClamp = true;
+   features->depthBiasClamp = !pdevice->info->a6xx.is_a702;
    features->fillModeNonSolid = true;
    features->depthBounds = true;
    features->wideLines = pdevice->info->a6xx.line_width_max > 1.0;
@@ -509,7 +509,7 @@ tu_get_features(struct tu_physical_device *pdevice,
    features->indexTypeUint8 = true;
 
    /* VK_KHR_line_rasterization */
-   features->rectangularLines = true;
+   features->rectangularLines = !pdevice->info->a6xx.is_a702;
    features->bresenhamLines = true;
    features->smoothLines = false;
    features->stippledRectangularLines = false;
@@ -1059,7 +1059,7 @@ tu_get_properties(struct tu_physical_device *pdevice,
    props->subPixelInterpolationOffsetBits = 4;
    props->maxFramebufferWidth = (1 << 14);
    props->maxFramebufferHeight = (1 << 14);
-   props->maxFramebufferLayers = (1 << 10);
+   props->maxFramebufferLayers = (1 << (pdevice->info->a6xx.is_a702 ? 8 : 10));
    props->framebufferColorSampleCounts = sample_counts;
    props->framebufferDepthSampleCounts = sample_counts;
    props->framebufferStencilSampleCounts = sample_counts;
diff --git a/src/freedreno/vulkan/tu_image.cc b/src/freedreno/vulkan/tu_image.cc
index a31b1847b6f..b3b311d9a3c 100644
--- a/src/freedreno/vulkan/tu_image.cc
+++ b/src/freedreno/vulkan/tu_image.cc
@@ -742,7 +742,7 @@ tu_image_init(struct tu_device *device, struct tu_image *image,
       }
    }
 
-   if (TU_DEBUG(NOUBWC)) {
+   if (TU_DEBUG(NOUBWC) || device->physical_device->info->a6xx.is_a702) {
       image->ubwc_enabled = false;
    }
 
diff --git a/src/freedreno/vulkan/tu_pipeline.cc b/src/freedreno/vulkan/tu_pipeline.cc
index 9b4a63e6279..e12a60e3685 100644
--- a/src/freedreno/vulkan/tu_pipeline.cc
+++ b/src/freedreno/vulkan/tu_pipeline.cc
@@ -3204,7 +3204,9 @@ tu6_rast_size(struct tu_device *dev,
               bool per_view_viewport,
               bool disable_fs)
 {
-   if (CHIP == A6XX) {
+   if (CHIP == A6XX && dev->physical_device->info->a6xx.is_a702) {
+      return 17;
+   } else if (CHIP == A6XX) {
       return 15 + (dev->physical_device->info->a6xx.has_legacy_pipeline_shading_rate ? 8 : 0);
    } else {
       return 27;
@@ -3254,9 +3256,9 @@ tu6_emit_rast(struct tu_cs *cs,
    tu_cs_emit_regs(cs,
                    PC_POLYGON_MODE(CHIP, polygon_mode));
 
-   if (CHIP == A7XX) {
+   if (CHIP == A7XX || cs->device->physical_device->info->a6xx.is_a702) {
       tu_cs_emit_regs(cs,
-                     A7XX_VPC_POLYGON_MODE2(polygon_mode));
+                     A6XX_VPC_POLYGON_MODE2(polygon_mode));
    }
 
    tu_cs_emit_regs(cs, PC_RASTER_CNTL(CHIP,
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc b/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc
index a0a2968f281..8e98ce79d62 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc
@@ -900,7 +900,7 @@ fd6_emit_static_regs(struct fd_context *ctx, struct fd_ringbuffer *ring)
    WRITE(REG_A6XX_SP_FLOAT_CNTL, A6XX_SP_FLOAT_CNTL_F16_NO_INF);
    WRITE(REG_A6XX_SP_DBG_ECO_CNTL, screen->info->a6xx.magic.SP_DBG_ECO_CNTL);
    WRITE(REG_A6XX_SP_PERFCTR_ENABLE, 0x3f);
-   if (CHIP == A6XX)
+   if (CHIP == A6XX && !screen->info->a6xx.is_a702)
       WRITE(REG_A6XX_TPL1_UNKNOWN_B605, 0x44);
    WRITE(REG_A6XX_TPL1_DBG_ECO_CNTL, screen->info->a6xx.magic.TPL1_DBG_ECO_CNTL);
    if (CHIP == A6XX) {
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc b/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc
index 7cf9e35a9a0..7bdca163672 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc
@@ -1278,7 +1278,8 @@ fd6_emit_tile_prep(struct fd_batch *batch, const struct fd_tile *tile)
 
       OUT_PKT7(ring, CP_SET_BIN_DATA5, 7);
       OUT_RING(ring, CP_SET_BIN_DATA5_0_VSC_SIZE(pipe->w * pipe->h) |
-                        CP_SET_BIN_DATA5_0_VSC_N(tile->n));
+                        CP_SET_BIN_DATA5_0_VSC_N(tile->n)
+                        /* A702 also sets BIT(0) but that hangchecks */);
       OUT_RELOC(ring, fd6_ctx->vsc_draw_strm, /* per-pipe draw-stream address */
                 (tile->p * fd6_ctx->vsc_draw_strm_pitch), 0, 0);
       OUT_RELOC(
diff --git a/src/gallium/drivers/freedreno/freedreno_resource.c b/src/gallium/drivers/freedreno/freedreno_resource.c
index 4a1dc734d3c..f91964ad97e 100644
--- a/src/gallium/drivers/freedreno/freedreno_resource.c
+++ b/src/gallium/drivers/freedreno/freedreno_resource.c
@@ -1302,7 +1302,7 @@ get_best_layout(struct fd_screen *screen,
       return LINEAR;
    }
 
-   bool ubwc_ok = is_a6xx(screen);
+   bool ubwc_ok = is_a6xx(screen) && !screen->info->a6xx.is_a702;
    if (FD_DBG(NOUBWC))
       ubwc_ok = false;
 
-- 
2.34.1

