From 2846db7a5d664ad6d7e0ffc93009031f6f0c26a8 Mon Sep 17 00:00:00 2001
From: Konrad Dybcio <konrad.dybcio@linaro.org>
Date: Fri, 16 Feb 2024 20:50:59 +0100
Subject: [PATCH] freedreno: Add initial A702 support

A702 has been used in Qualcomm QCM2290 / QRB2210 as well as in Qualcomm
SW5100 (SmartWatch).

Upstream-Status: Submitted [https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/34867]

Co-developed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
Co-developed-by: Craig Stout <cstout@google.com>
Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@oss.qualcomm.com>
Signed-off-by: Jose Quaresma <jose.quaresma@oss.qualcomm.com>
---
 src/freedreno/common/freedreno_dev_info.h     |  3 +
 src/freedreno/common/freedreno_devices.py     | 52 +++++++++++
 src/freedreno/registers/adreno/a6xx.xml       |  2 +-
 src/freedreno/vulkan/tu_cmd_buffer.cc         |  3 +-
 src/freedreno/vulkan/tu_device.cc             | 18 ++--
 src/freedreno/vulkan/tu_formats.cc            | 87 ++++++++++++++++++-
 src/freedreno/vulkan/tu_image.cc              |  4 +
 src/freedreno/vulkan/tu_pipeline.cc           |  8 +-
 .../drivers/freedreno/a6xx/fd6_emit.cc        |  2 +-
 .../drivers/freedreno/a6xx/fd6_gmem.cc        |  1 +
 .../drivers/freedreno/a6xx/fd6_rasterizer.cc  |  5 +-
 .../drivers/freedreno/a6xx/fd6_resource.cc    |  6 ++
 .../drivers/freedreno/a6xx/fd6_screen.cc      | 18 ++++
 .../drivers/freedreno/freedreno_resource.c    |  2 +-
 .../drivers/freedreno/freedreno_screen.c      | 10 ++-
 15 files changed, 197 insertions(+), 24 deletions(-)

diff --git a/src/freedreno/common/freedreno_dev_info.h b/src/freedreno/common/freedreno_dev_info.h
index 6b20f84506c..4b56f89d297 100644
--- a/src/freedreno/common/freedreno_dev_info.h
+++ b/src/freedreno/common/freedreno_dev_info.h
@@ -219,6 +219,9 @@ struct fd_dev_info {
       /* Whether the sad instruction (iadd3) is supported. */
       bool has_sad;
 
+      /* A702 cuts A LOT of things.. */
+      bool is_a702;
+
       struct {
          uint32_t PC_POWER_CNTL;
          uint32_t TPL1_DBG_ECO_CNTL;
diff --git a/src/freedreno/common/freedreno_devices.py b/src/freedreno/common/freedreno_devices.py
index 6b41d22574d..6897e63c706 100644
--- a/src/freedreno/common/freedreno_devices.py
+++ b/src/freedreno/common/freedreno_devices.py
@@ -825,6 +825,58 @@ add_gpus([
         ],
     ))
 
+add_gpus([
+        GPUId(702), # KGSL
+        GPUId(chip_id=0x00b207002000, name="FD702"), # QRB2210 RB1
+        GPUId(chip_id=0xffff07002000, name="FD702"), # Default no-speedbin fallback
+    ], A6xxGPUInfo(
+        CHIP.A6XX, # NOT a mistake!
+        [a6xx_base, A6XXProps(
+            reg_size_vec4 = 48,
+            instr_cache_size = 64,
+            indirect_draw_wfm_quirk = True,
+            has_cp_reg_write = False,
+            depth_bounds_require_depth_test_quirk = True,
+            has_gmem_fast_clear = True,
+            has_hw_multiview = False,
+            has_sampler_minmax = False,
+            has_lpac = False,
+            has_fs_tex_prefetch = False,
+            sysmem_per_ccu_depth_cache_size = 128 * 1024, # ??????
+            sysmem_per_ccu_color_cache_size = 128 * 1024, # ??????
+            gmem_ccu_color_cache_fraction = CCUColorCacheFraction.FULL.value,
+            vs_max_inputs_count = 16,
+            prim_alloc_threshold = 0x1,
+            storage_16bit = True,
+            is_a702 = True,
+            )
+        ],
+        num_ccu = 1,
+        tile_align_w = 32,
+        tile_align_h = 16,
+        num_vsc_pipes = 16,
+        cs_shared_mem_size = 16 * 1024,
+        wave_granularity = 1,
+        fibers_per_sp = 128 * 16,
+        threadsize_base = 16,
+        max_waves = 32,
+        magic_regs = dict(
+            PC_POWER_CNTL = 0,
+            TPL1_DBG_ECO_CNTL = 0x8000,
+            GRAS_DBG_ECO_CNTL = 0,
+            SP_CHICKEN_BITS = 0x1400,
+            UCHE_CLIENT_PF = 0x84,
+            PC_MODE_CNTL = 0xf,
+            SP_DBG_ECO_CNTL = 0x0,
+            RB_DBG_ECO_CNTL = 0x100000,
+            RB_DBG_ECO_CNTL_blit = 0x100000,
+            HLSQ_DBG_ECO_CNTL = 0,
+            RB_UNKNOWN_8E01 = 0x1,
+            VPC_DBG_ECO_CNTL = 0x0,
+            UCHE_UNKNOWN_0E12 = 0x1,
+        ),
+    ))
+
 # Based on a6xx_base + a6xx_gen4
 a7xx_base = A6XXProps(
         has_gmem_fast_clear = True,
diff --git a/src/freedreno/registers/adreno/a6xx.xml b/src/freedreno/registers/adreno/a6xx.xml
index 17d26f49260..9aa117357fe 100644
--- a/src/freedreno/registers/adreno/a6xx.xml
+++ b/src/freedreno/registers/adreno/a6xx.xml
@@ -4352,7 +4352,7 @@ to upconvert to 32b float internally?
 	<reg32 offset="0x9306" name="VPC_SO_DISABLE" usage="rp_blit">
 		<bitfield name="DISABLE" pos="0" type="boolean"/>
 	</reg32>
-	<reg32 offset="0x9307" name="VPC_POLYGON_MODE2" variants="A7XX-" usage="rp_blit">
+	<reg32 offset="0x9307" name="VPC_POLYGON_MODE2" variants="A6XX-" usage="rp_blit"> <!-- A702 + A7xx -->
 		<bitfield name="MODE" low="0" high="1" type="a6xx_polygon_mode"/>
 	</reg32>
 	<reg32 offset="0x9308" name="VPC_ATTR_BUF_SIZE_GMEM" variants="A7XX-" usage="rp_blit">
diff --git a/src/freedreno/vulkan/tu_cmd_buffer.cc b/src/freedreno/vulkan/tu_cmd_buffer.cc
index e0eb0849e80..af248cd06ac 100644
--- a/src/freedreno/vulkan/tu_cmd_buffer.cc
+++ b/src/freedreno/vulkan/tu_cmd_buffer.cc
@@ -1209,6 +1209,7 @@ tu6_emit_tile_select(struct tu_cmd_buffer *cmd,
       tu_cs_emit(cs, 0x0);
 
       tu_cs_emit_pkt7(cs, CP_SET_BIN_DATA5_OFFSET, abs_mask ? 5 : 4);
+      /* A702 also sets BIT(0) but that hangchecks */
       tu_cs_emit(cs, vsc->pipe_sizes[tile->pipe] |
                      CP_SET_BIN_DATA5_0_VSC_N(slot) |
                      CP_SET_BIN_DATA5_0_VSC_MASK(tile->slot_mask >> slot) |
@@ -1455,7 +1456,7 @@ tu6_init_static_regs(struct tu_device *dev, struct tu_cs *cs)
    tu_cs_emit_write_reg(cs, REG_A6XX_SP_DBG_ECO_CNTL,
                         phys_dev->info->a6xx.magic.SP_DBG_ECO_CNTL);
    tu_cs_emit_write_reg(cs, REG_A6XX_SP_PERFCTR_ENABLE, 0x3f);
-   if (CHIP == A6XX)
+   if (CHIP == A6XX && !cs->device->physical_device->info->a6xx.is_a702)
       tu_cs_emit_write_reg(cs, REG_A6XX_TPL1_UNKNOWN_B605, 0x44);
    tu_cs_emit_write_reg(cs, REG_A6XX_TPL1_DBG_ECO_CNTL,
                         phys_dev->info->a6xx.magic.TPL1_DBG_ECO_CNTL);
diff --git a/src/freedreno/vulkan/tu_device.cc b/src/freedreno/vulkan/tu_device.cc
index dd79caf6927..844e563c8c1 100644
--- a/src/freedreno/vulkan/tu_device.cc
+++ b/src/freedreno/vulkan/tu_device.cc
@@ -236,7 +236,7 @@ get_device_extensions(const struct tu_physical_device *device,
       .KHR_shader_subgroup_rotate = true,
       .KHR_shader_subgroup_uniform_control_flow = true,
       .KHR_shader_terminate_invocation = true,
-      .KHR_spirv_1_4 = true,
+      .KHR_spirv_1_4 = device->info->a6xx.has_hw_multiview || TU_DEBUG(NOCONFORM),
       .KHR_storage_buffer_storage_class = true,
 #ifdef TU_USE_WSI_PLATFORM
       .KHR_swapchain = true,
@@ -324,7 +324,7 @@ get_device_extensions(const struct tu_physical_device *device,
 #endif
       .EXT_texel_buffer_alignment = true,
       .EXT_tooling_info = true,
-      .EXT_transform_feedback = true,
+      .EXT_transform_feedback = !device->info->a6xx.is_a702,
       .EXT_vertex_attribute_divisor = true,
       .EXT_vertex_input_dynamic_state = true,
 
@@ -359,15 +359,15 @@ tu_get_features(struct tu_physical_device *pdevice,
    features->fullDrawIndexUint32 = true;
    features->imageCubeArray = true;
    features->independentBlend = true;
-   features->geometryShader = true;
-   features->tessellationShader = true;
+   features->geometryShader = !pdevice->info->a6xx.is_a702;
+   features->tessellationShader = !pdevice->info->a6xx.is_a702;
    features->sampleRateShading = true;
    features->dualSrcBlend = true;
    features->logicOp = true;
    features->multiDrawIndirect = true;
    features->drawIndirectFirstInstance = true;
    features->depthClamp = true;
-   features->depthBiasClamp = true;
+   features->depthBiasClamp = !pdevice->info->a6xx.is_a702;
    features->fillModeNonSolid = true;
    features->depthBounds = true;
    features->wideLines = pdevice->info->a6xx.line_width_max > 1.0;
@@ -509,7 +509,7 @@ tu_get_features(struct tu_physical_device *pdevice,
    features->indexTypeUint8 = true;
 
    /* VK_KHR_line_rasterization */
-   features->rectangularLines = true;
+   features->rectangularLines = !pdevice->info->a6xx.is_a702;
    features->bresenhamLines = true;
    features->smoothLines = false;
    features->stippledRectangularLines = false;
@@ -617,7 +617,7 @@ tu_get_features(struct tu_physical_device *pdevice,
 
    /* VK_EXT_extended_dynamic_state3 */
    features->extendedDynamicState3PolygonMode = true;
-   features->extendedDynamicState3TessellationDomainOrigin = true;
+   features->extendedDynamicState3TessellationDomainOrigin = !pdevice->info->a6xx.is_a702;
    features->extendedDynamicState3DepthClampEnable = true;
    features->extendedDynamicState3DepthClipEnable = true;
    features->extendedDynamicState3LogicOpEnable = true;
@@ -626,7 +626,7 @@ tu_get_features(struct tu_physical_device *pdevice,
    features->extendedDynamicState3AlphaToCoverageEnable = true;
    features->extendedDynamicState3AlphaToOneEnable = true;
    features->extendedDynamicState3DepthClipNegativeOneToOne = true;
-   features->extendedDynamicState3RasterizationStream = true;
+   features->extendedDynamicState3RasterizationStream = !pdevice->info->a6xx.is_a702;
    features->extendedDynamicState3ConservativeRasterizationMode =
       pdevice->vk.supported_extensions.EXT_conservative_rasterization;
    features->extendedDynamicState3ExtraPrimitiveOverestimationSize =
@@ -1059,7 +1059,7 @@ tu_get_properties(struct tu_physical_device *pdevice,
    props->subPixelInterpolationOffsetBits = 4;
    props->maxFramebufferWidth = (1 << 14);
    props->maxFramebufferHeight = (1 << 14);
-   props->maxFramebufferLayers = (1 << 10);
+   props->maxFramebufferLayers = (1 << (pdevice->info->a6xx.is_a702 ? 8 : 10));
    props->framebufferColorSampleCounts = sample_counts;
    props->framebufferDepthSampleCounts = sample_counts;
    props->framebufferStencilSampleCounts = sample_counts;
diff --git a/src/freedreno/vulkan/tu_formats.cc b/src/freedreno/vulkan/tu_formats.cc
index cb134a979c6..56508f22834 100644
--- a/src/freedreno/vulkan/tu_formats.cc
+++ b/src/freedreno/vulkan/tu_formats.cc
@@ -57,11 +57,92 @@ tu6_format_color(enum pipe_format format, enum a6xx_tile_mode tile_mode,
 }
 
 static bool
-tu6_format_texture_supported(enum pipe_format format)
+tu6_format_texture_supported(struct tu_physical_device *physical_device, enum pipe_format format)
 {
+   if (physical_device->info->a6xx.is_a702) {
+      switch (format) {
+         case PIPE_FORMAT_RGTC1_UNORM:
+         case PIPE_FORMAT_RGTC1_SNORM:
+         case PIPE_FORMAT_RGTC2_UNORM:
+         case PIPE_FORMAT_RGTC2_SNORM:
+         case PIPE_FORMAT_BPTC_RGBA_UNORM:
+         case PIPE_FORMAT_BPTC_SRGBA:
+         case PIPE_FORMAT_BPTC_RGB_FLOAT:
+         case PIPE_FORMAT_BPTC_RGB_UFLOAT:
+            return false;
+      }
+   }
    return fd6_texture_format(format, TILE6_LINEAR, false) != FMT6_NONE;
 }
 
+static bool
+tu_format_texture_linear_filtering_supported(struct tu_physical_device *physical_device, VkFormat vk_format)
+{
+   if (physical_device->info->a6xx.is_a702) {
+      switch (vk_format) {
+         case VK_FORMAT_D16_UNORM:
+         case VK_FORMAT_D24_UNORM_S8_UINT:
+         case VK_FORMAT_X8_D24_UNORM_PACK32:
+         case VK_FORMAT_D32_SFLOAT:
+         case VK_FORMAT_D32_SFLOAT_S8_UINT:
+         case VK_FORMAT_R16_UNORM:
+         case VK_FORMAT_R16_SNORM:
+         case VK_FORMAT_R16_USCALED:
+         case VK_FORMAT_R16_SSCALED:
+         case VK_FORMAT_R16_UINT:
+         case VK_FORMAT_R16_SINT:
+         case VK_FORMAT_R16_SFLOAT:
+         case VK_FORMAT_R16G16_UNORM:
+         case VK_FORMAT_R16G16_SNORM:
+         case VK_FORMAT_R16G16_USCALED:
+         case VK_FORMAT_R16G16_SSCALED:
+         case VK_FORMAT_R16G16_UINT:
+         case VK_FORMAT_R16G16_SINT:
+         case VK_FORMAT_R16G16_SFLOAT:
+         case VK_FORMAT_R16G16B16_UNORM:
+         case VK_FORMAT_R16G16B16_SNORM:
+         case VK_FORMAT_R16G16B16_USCALED:
+         case VK_FORMAT_R16G16B16_SSCALED:
+         case VK_FORMAT_R16G16B16_UINT:
+         case VK_FORMAT_R16G16B16_SINT:
+         case VK_FORMAT_R16G16B16_SFLOAT:
+         case VK_FORMAT_R16G16B16A16_UNORM:
+         case VK_FORMAT_R16G16B16A16_SNORM:
+         case VK_FORMAT_R16G16B16A16_USCALED:
+         case VK_FORMAT_R16G16B16A16_SSCALED:
+         case VK_FORMAT_R16G16B16A16_UINT:
+         case VK_FORMAT_R16G16B16A16_SINT:
+         case VK_FORMAT_R16G16B16A16_SFLOAT:
+         case VK_FORMAT_R32_UINT:
+         case VK_FORMAT_R32_SINT:
+         case VK_FORMAT_R32_SFLOAT:
+         case VK_FORMAT_R32G32_UINT:
+         case VK_FORMAT_R32G32_SINT:
+         case VK_FORMAT_R32G32_SFLOAT:
+         case VK_FORMAT_R32G32B32_UINT:
+         case VK_FORMAT_R32G32B32_SINT:
+         case VK_FORMAT_R32G32B32_SFLOAT:
+         case VK_FORMAT_R32G32B32A32_UINT:
+         case VK_FORMAT_R32G32B32A32_SINT:
+         case VK_FORMAT_R32G32B32A32_SFLOAT:
+         case VK_FORMAT_R64_UINT:
+         case VK_FORMAT_R64_SINT:
+         case VK_FORMAT_R64_SFLOAT:
+         case VK_FORMAT_R64G64_UINT:
+         case VK_FORMAT_R64G64_SINT:
+         case VK_FORMAT_R64G64_SFLOAT:
+         case VK_FORMAT_R64G64B64_UINT:
+         case VK_FORMAT_R64G64B64_SINT:
+         case VK_FORMAT_R64G64B64_SFLOAT:
+         case VK_FORMAT_R64G64B64A64_UINT:
+         case VK_FORMAT_R64G64B64A64_SINT:
+         case VK_FORMAT_R64G64B64A64_SFLOAT:
+            return false;
+      }
+   }
+   return !vk_format_is_int(vk_format);
+}
+
 struct tu_native_format
 tu6_format_texture(enum pipe_format format, enum a6xx_tile_mode tile_mode,
                    bool is_mutable)
@@ -119,7 +200,7 @@ tu_physical_device_get_format_properties(
 
    bool supported_vtx = tu6_format_vtx_supported(format);
    bool supported_color = tu6_format_color_supported(format);
-   bool supported_tex = tu6_format_texture_supported(format);
+   bool supported_tex = tu6_format_texture_supported(physical_device, format);
    bool is_npot = !util_is_power_of_two_or_zero(desc->block.bits);
 
    if (format == PIPE_FORMAT_NONE ||
@@ -169,7 +250,7 @@ tu_physical_device_get_format_properties(
          optimal |= VK_FORMAT_FEATURE_2_BLIT_SRC_BIT;
       }
 
-      if (!vk_format_is_int(vk_format)) {
+      if (tu_format_texture_linear_filtering_supported(physical_device, vk_format)) {
          optimal |= VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT;
 
          if (physical_device->vk.supported_extensions.EXT_filter_cubic)
diff --git a/src/freedreno/vulkan/tu_image.cc b/src/freedreno/vulkan/tu_image.cc
index a31b1847b6f..49b208f80f7 100644
--- a/src/freedreno/vulkan/tu_image.cc
+++ b/src/freedreno/vulkan/tu_image.cc
@@ -341,6 +341,10 @@ ubwc_possible(struct tu_device *device,
               uint32_t mip_levels,
               bool use_z24uint_s8uint)
 {
+   /* TODO: enable for a702 */
+   if (info->a6xx.is_a702)
+      return false;
+
    /* no UBWC with compressed formats, E5B9G9R9, S8_UINT
     * (S8_UINT because separate stencil doesn't have UBWC-enable bit)
     */
diff --git a/src/freedreno/vulkan/tu_pipeline.cc b/src/freedreno/vulkan/tu_pipeline.cc
index 9b4a63e6279..e12a60e3685 100644
--- a/src/freedreno/vulkan/tu_pipeline.cc
+++ b/src/freedreno/vulkan/tu_pipeline.cc
@@ -3204,7 +3204,9 @@ tu6_rast_size(struct tu_device *dev,
               bool per_view_viewport,
               bool disable_fs)
 {
-   if (CHIP == A6XX) {
+   if (CHIP == A6XX && dev->physical_device->info->a6xx.is_a702) {
+      return 17;
+   } else if (CHIP == A6XX) {
       return 15 + (dev->physical_device->info->a6xx.has_legacy_pipeline_shading_rate ? 8 : 0);
    } else {
       return 27;
@@ -3254,9 +3256,9 @@ tu6_emit_rast(struct tu_cs *cs,
    tu_cs_emit_regs(cs,
                    PC_POLYGON_MODE(CHIP, polygon_mode));
 
-   if (CHIP == A7XX) {
+   if (CHIP == A7XX || cs->device->physical_device->info->a6xx.is_a702) {
       tu_cs_emit_regs(cs,
-                     A7XX_VPC_POLYGON_MODE2(polygon_mode));
+                     A6XX_VPC_POLYGON_MODE2(polygon_mode));
    }
 
    tu_cs_emit_regs(cs, PC_RASTER_CNTL(CHIP,
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc b/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc
index a0a2968f281..8e98ce79d62 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_emit.cc
@@ -900,7 +900,7 @@ fd6_emit_static_regs(struct fd_context *ctx, struct fd_ringbuffer *ring)
    WRITE(REG_A6XX_SP_FLOAT_CNTL, A6XX_SP_FLOAT_CNTL_F16_NO_INF);
    WRITE(REG_A6XX_SP_DBG_ECO_CNTL, screen->info->a6xx.magic.SP_DBG_ECO_CNTL);
    WRITE(REG_A6XX_SP_PERFCTR_ENABLE, 0x3f);
-   if (CHIP == A6XX)
+   if (CHIP == A6XX && !screen->info->a6xx.is_a702)
       WRITE(REG_A6XX_TPL1_UNKNOWN_B605, 0x44);
    WRITE(REG_A6XX_TPL1_DBG_ECO_CNTL, screen->info->a6xx.magic.TPL1_DBG_ECO_CNTL);
    if (CHIP == A6XX) {
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc b/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc
index 7cf9e35a9a0..6e37b1295bb 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_gmem.cc
@@ -1277,6 +1277,7 @@ fd6_emit_tile_prep(struct fd_batch *batch, const struct fd_tile *tile)
       OUT_RING(ring, 0x0);
 
       OUT_PKT7(ring, CP_SET_BIN_DATA5, 7);
+      /* A702 also sets BIT(0) but that hangchecks */
       OUT_RING(ring, CP_SET_BIN_DATA5_0_VSC_SIZE(pipe->w * pipe->h) |
                         CP_SET_BIN_DATA5_0_VSC_N(tile->n));
       OUT_RELOC(ring, fd6_ctx->vsc_draw_strm, /* per-pipe draw-stream address */
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_rasterizer.cc b/src/gallium/drivers/freedreno/a6xx/fd6_rasterizer.cc
index 1da50349f65..5e581c77fc9 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_rasterizer.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_rasterizer.cc
@@ -99,8 +99,9 @@ __fd6_setup_rasterizer_stateobj(struct fd_context *ctx,
    OUT_REG(ring, A6XX_VPC_POLYGON_MODE(mode));
    OUT_REG(ring, PC_POLYGON_MODE(CHIP, mode));
 
-   if (CHIP == A7XX) {
-      OUT_REG(ring, A7XX_VPC_POLYGON_MODE2(mode));
+   if (CHIP == A7XX ||
+       (CHIP == A6XX && ctx->screen->info->a6xx.is_a702)) {
+      OUT_REG(ring, A6XX_VPC_POLYGON_MODE2(mode));
    }
 
    /* With a7xx the hw doesn't do the clamping for us.  When depth clamp
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_resource.cc b/src/gallium/drivers/freedreno/a6xx/fd6_resource.cc
index ce735a974b5..463905cbee7 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_resource.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_resource.cc
@@ -28,6 +28,12 @@ ok_ubwc_format(struct pipe_screen *pscreen, enum pipe_format pfmt, unsigned nr_s
 {
    const struct fd_dev_info *info = fd_screen(pscreen)->info;
 
+   /*
+    * TODO: no UBWC on a702?
+    */
+   if (info->a6xx.is_a702)
+      return false;
+
    switch (pfmt) {
    case PIPE_FORMAT_Z24X8_UNORM:
       /* MSAA+UBWC does not work without FMT6_Z24_UINT_S8_UINT: */
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_screen.cc b/src/gallium/drivers/freedreno/a6xx/fd6_screen.cc
index 1b8ad6add26..56c98c51f8a 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_screen.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_screen.cc
@@ -65,6 +65,24 @@ fd6_screen_is_format_supported(struct pipe_screen *pscreen,
 
    bool has_color = fd6_color_format(format, TILE6_LINEAR) != FMT6_NONE;
    bool has_tex = fd6_texture_format(format, TILE6_LINEAR, false) != FMT6_NONE;
+   struct fd_screen *screen = fd_screen(pscreen);
+
+   if (is_a6xx(screen) && screen->info->a6xx.is_a702) {
+      switch (format) {
+         case PIPE_FORMAT_RGTC1_UNORM:
+         case PIPE_FORMAT_RGTC1_SNORM:
+         case PIPE_FORMAT_RGTC2_UNORM:
+         case PIPE_FORMAT_RGTC2_SNORM:
+         case PIPE_FORMAT_BPTC_RGBA_UNORM:
+         case PIPE_FORMAT_BPTC_SRGBA:
+         case PIPE_FORMAT_BPTC_RGB_FLOAT:
+         case PIPE_FORMAT_BPTC_RGB_UFLOAT:
+            has_tex = false;
+            break;
+         default:
+            break;
+      }
+   }
 
    if ((usage & (PIPE_BIND_SAMPLER_VIEW | PIPE_BIND_SHADER_IMAGE)) &&
        has_tex &&
diff --git a/src/gallium/drivers/freedreno/freedreno_resource.c b/src/gallium/drivers/freedreno/freedreno_resource.c
index 4a1dc734d3c..f91964ad97e 100644
--- a/src/gallium/drivers/freedreno/freedreno_resource.c
+++ b/src/gallium/drivers/freedreno/freedreno_resource.c
@@ -1302,7 +1302,7 @@ get_best_layout(struct fd_screen *screen,
       return LINEAR;
    }
 
-   bool ubwc_ok = is_a6xx(screen);
+   bool ubwc_ok = is_a6xx(screen) && !screen->info->a6xx.is_a702;
    if (FD_DBG(NOUBWC))
       ubwc_ok = false;
 
diff --git a/src/gallium/drivers/freedreno/freedreno_screen.c b/src/gallium/drivers/freedreno/freedreno_screen.c
index 2323d0dbfb3..9bac5af8c01 100644
--- a/src/gallium/drivers/freedreno/freedreno_screen.c
+++ b/src/gallium/drivers/freedreno/freedreno_screen.c
@@ -213,6 +213,8 @@ fd_init_shader_caps(struct fd_screen *screen)
       case PIPE_SHADER_GEOMETRY:
          if (!is_a6xx(screen))
             continue;
+         if (screen->info->a6xx.is_a702)
+            continue;
          break;
       case PIPE_SHADER_COMPUTE:
          if (!has_compute(screen))
@@ -485,11 +487,13 @@ fd_init_screen_caps(struct fd_screen *screen)
 
    caps->glsl_feature_level =
    caps->glsl_feature_level_compatibility =
-      is_a6xx(screen) ? 460 : (is_ir3(screen) ? 140 : 120);
+      is_a6xx(screen) ? (screen->info->a6xx.is_a702 ? 140 : 460) :
+                        (is_ir3(screen) ? 140 : 120);
 
    caps->essl_feature_level =
-      is_a4xx(screen) || is_a5xx(screen) || is_a6xx(screen) ? 320 :
-      (is_ir3(screen) ? 300 : 120);
+      (is_a6xx(screen) && screen->info->a6xx.is_a702) ? 310 :
+      (is_a4xx(screen) || is_a5xx(screen) || is_a6xx(screen) ? 320 :
+      (is_ir3(screen) ? 300 : 120));
 
    caps->shader_buffer_offset_alignment =
       is_a6xx(screen) ? 64 : (is_a5xx(screen) || is_a4xx(screen) ? 4 : 0);
-- 
2.49.0

